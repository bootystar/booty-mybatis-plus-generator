package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${basePackage}.${VOPackage}.${entity}VO;
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;

#if(${showServiceImplMethod})
#if(${generateDelete}||${generateSelect})
import java.io.Serializable;
#end
#if(${generateImport}||${generateSelect})
import java.util.List;
#end
#if(${generateSelect})
import com.baomidou.mybatisplus.core.metadata.IPage;
#end
#if(${generateImport})
import java.util.stream.Collectors;
import java.io.InputStream;
#end
#end

/**
 * $!{table.comment} 服务实现类
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName},${entity},${entity}VO>() implements ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName},${entity},${entity}VO> implements ${table.serviceName} {

#if(${showServiceImplMethod})
    #if(${generateSelect})
    @Override
    protected void voPostProcess(List<${entity}VO> dataList) {

    }

    @Override
    public ${entity}VO voById(Serializable id){
        return super.voById(id);
    }

    @Override
    public <S> List<${entity}VO> listByDTO(S DTO){
##        List<${entity}VO> voList = baseMapper.listByMap(toMap(DTO), null);
##        this.voPostProcess(voList);
##        return voList;
        return super.listByDTO(DTO);
    }

    @Override
    public <S> IPage<${entity}VO> pageByDTO(S DTO, Long current, Long size){
        return super.pageByDTO(DTO,current,size);
    }
    #end
    #if(${generateInsert})

    @Override
    public <S> boolean insertByDTO(S DTO) {
##        ${entity} entity = this.toEntity(DTO);
##        return super.save(entity);
        return super.insertByDTO(DTO);
    }
##
##    @Override
##    public <S> boolean insertBatchByDTO(Collection<S> DTOList) {
##        List<${entity}> entityList = DTOList.stream().map(this::toEntity).collect(Collectors.toList());
##
##        return super.saveBatch(entityList);
##    }
    #end
    #if(${generateUpdate})

    @Override
    public <S> boolean updateByDTO(S DTO) {
        return super.updateByDTO(DTO);
    }
    #end
    #if(${generateDelete})

    @Override
    public boolean removeById(Serializable id) {
        return super.removeById(id);
    }
    #end
    #if(${generateImport})

    @Override
    public <U> boolean importExcel(InputStream is, Class<U> clazz) {
##        List<U> cachedDataList = super.processImportData(is,clazz);
##        if (cachedDataList == null || cachedDataList.isEmpty()) return false;
##        List<${entity}> entityList = cachedDataList.stream()
##            .map(e->{
##                ${entity} entity = this.toEntity(e);
##
##
##                return entity;
##            }).collect(Collectors.toList());
##        return super.saveBatch(entityList);
        return super.importExcel(is,clazz);
    }
    #end
#end

}
#end
